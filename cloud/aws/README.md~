Amazon Web Services (AWS)
=========================

Getting Started
---------------

The steps below outline creating an AWS account, creating some users,
generating access keys and the importance of selecting a region.
Amazon has extensive tutorials on using their cloud services including
using their UI to [launch a
server.](https://aws.amazon.com/getting-started/tutorials/launch-a-virtual-machine)
Below are the minimum required steps to use Cloud Rails - AWS.

**Note that AWS accounts require a valid credit card**.

1. [Create an AWS account.](https://portal.aws.amazon.com/billing/signup)  
  
2. [Create users](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html)

3. [Generate api access id and key](https://console.aws.amazon.com/iam/home?#/security_credentials)

4. Select region to use.  We use us-east-2 to store the AMIs




Network  
-------

There are some preliminary steps to get up and running on AWS:  

 . create a network (VPC)  
 . an identity (IAM)  
 . private key pair (KEYPAIR)  

that can be done once.  Either step thru the [Network
notebook](python/Network.ipynb) filling in the appropriate local
directory to store the generated keypair .pem file or run the utils.py
script.

```bash  
python3 utils.py  
```  

AWS also provides a [Commnad Line Interface]() and [User
Interface](ui.md) for the requisite network/credential settings.


Server  
------  

We provide two ways to create an instance; new and from an image.  In both cases, the server is set-up with a few modifications.

 . an assumed single volume at /dev/xvdf with mount point /data owned by the `ubuntu` user  
 . an environment varible `$CHAIN_DATA=/data/{BLOCKCHAIN_ID}` and updated $PATH
 . install python package manager `pip`.

See the bash shell script below:

```bash
#!/bin/bash
sudo apt-get update

sudo mkfs -t xfs /dev/xvdf
sudo mkdir /data
sudo mount /dev/xvdf /data
sudo chown -R ubuntu:ubuntu /data

export CHAIN_DATA=/data/{BLOCKCHAIN_ID}
echo 'export CHAIN_DATA=/data/{BLOCKCHAIN_ID}'  >> /home/ubuntu/.bashrc

export PATH=$PATH:$CHAIN_DATA
echo 'export PATH=$PATH:/data/{BLOCKCHAIN_ID}'  >> /home/ubuntu/.bashrc

source ~/.bashrc

mkdir $CHAIN_DATA
cd $CHAIN_DATA

sudo apt-get update
sudo apt-get install -y python3-pip
```

Each **coin** also includes additional shell scripts detailed in their
respective folders; for example [bitcoin]()  

2. Create from image

Step thru the [AMI notebook](python/AMI.ipynb) selecting the **ID**
(e.g. ethereum.org) and **node** (e.g. Go Mainnet) for the desired
blockchain from the table generated or run the utils.py script.  This
will launch an EC2 instance (server) and start syncing the blockchain
from the previous block height listed on the image.  

Image
-----

After a node is created and fully synced or an existing node
re-synced, a public image can be created or updated.  

1. Create  

2. Update/Delete  


Utility code
------------

The included [utils.py](utils.py) script parallels the included notebooks.  
